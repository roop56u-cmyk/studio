-- Drop existing tables and types in a safe order
DROP TABLE IF EXISTS public.requests CASCADE;
DROP TABLE IF EXISTS public.user_wallets CASCADE;
DROP TABLE IF EXISTS public.messages CASCADE;
DROP TABLE IF EXISTS public.users CASCADE;
DROP TYPE IF EXISTS public.request_type;
DROP TYPE IF EXISTS public.request_status;

-- Recreate the users table
CREATE TABLE public.users (
    id UUID PRIMARY KEY,
    full_name TEXT,
    referral_code TEXT UNIQUE,
    referred_by TEXT,
    status TEXT DEFAULT 'inactive',
    is_account_active BOOLEAN DEFAULT FALSE,
    override_level INT DEFAULT NULL,
    is_bonus_disabled BOOLEAN DEFAULT FALSE,
    withdrawal_restriction_until TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    activated_at TIMESTAMPTZ,
    is_admin BOOLEAN DEFAULT FALSE
);
COMMENT ON TABLE public.users IS 'Stores public-facing user profile information.';

-- Create custom enum types for requests
CREATE TYPE public.request_type AS ENUM (
    'Recharge', 'Withdrawal', 'Team Reward', 'Team Size Reward', 'Sign-up Bonus', 'Referral Bonus', 'Salary Claim', 'Reimbursement', 'Custom Reward', 'Event Claim'
);
CREATE TYPE public.request_status AS ENUM (
    'Pending', 'Approved', 'Declined', 'On Hold'
);

-- Create the requests table
CREATE TABLE public.requests (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES public.users(id),
    type public.request_type NOT NULL,
    amount NUMERIC(10, 2) NOT NULL,
    address TEXT,
    status public.request_status DEFAULT 'Pending',
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    image_url TEXT
);
COMMENT ON TABLE public.requests IS 'Tracks user requests for deposits, withdrawals, and rewards.';

-- Create the user_wallets table
CREATE TABLE public.user_wallets (
    user_id UUID PRIMARY KEY REFERENCES public.users(id),
    main_balance NUMERIC(10, 2) DEFAULT 0.00,
    task_rewards_balance NUMERIC(10, 2) DEFAULT 0.00,
    interest_earnings_balance NUMERIC(10, 2) DEFAULT 0.00
);
COMMENT ON TABLE public.user_wallets IS 'Stores the different wallet balances for each user.';

-- Create the messages table
CREATE TABLE public.messages (
    id BIGSERIAL PRIMARY KEY,
    sender_id UUID REFERENCES public.users(id),
    recipient_id UUID REFERENCES public.users(id),
    content TEXT,
    image_url TEXT,
    created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
    is_read BOOLEAN DEFAULT FALSE
);
COMMENT ON TABLE public.messages IS 'Stores messages for the inbox system.';


-- Drop the trigger and function if they exist, cascading to dependent objects
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;
DROP FUNCTION IF EXISTS public.handle_new_user();

-- Function to create a public user profile when a new auth user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.users (id, full_name, referral_code, referred_by, created_at)
    VALUES (
        new.id,
        new.raw_user_meta_data->>'full_name',
        new.raw_user_meta_data->>'referral_code',
        new.raw_user_meta_data->>'referred_by',
        new.created_at
    );
    INSERT INTO public.user_wallets (user_id)
    VALUES (new.id);
    RETURN new;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to execute the function on new user creation
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


-- Drop the admin setup function if it exists to allow for re-running the script
DROP FUNCTION IF EXISTS public.setup_admin_user();

-- Function to create the admin user if they don't exist
CREATE OR REPLACE FUNCTION public.setup_admin_user(admin_email TEXT, admin_password TEXT)
RETURNS void AS $$
DECLARE
    admin_uuid UUID;
BEGIN
    -- Check if the admin user already exists in auth.users
    SELECT id INTO admin_uuid FROM auth.users WHERE email = admin_email;

    -- If the admin user does not exist, create them
    IF admin_uuid IS NULL THEN
        INSERT INTO auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, recovery_token, recovery_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, created_at, updated_at, confirmation_token, email_change, email_change_sent_at)
        VALUES (
            '00000000-0000-0000-0000-000000000000',
            gen_random_uuid(),
            'authenticated',
            'authenticated',
            admin_email,
            crypt(admin_password, gen_salt('bf')),
            NOW(),
            '',
            NULL,
            NULL,
            '{"provider":"email","providers":["email"]}',
            '{"full_name":"Admin User","referral_code":"ADMIN-CODE","referred_by":null}',
            NOW(),
            NOW(),
            '',
            '',
            NULL
        )
        RETURNING id INTO admin_uuid;

        RAISE NOTICE 'Admin user created in auth.users with ID: %', admin_uuid;
    ELSE
        RAISE NOTICE 'Admin user with email % already exists in auth.users.', admin_email;
    END IF;

    -- Check if a public profile for the admin exists. If not, create one.
    IF NOT EXISTS (SELECT 1 FROM public.users WHERE id = admin_uuid) THEN
        INSERT INTO public.users (id, full_name, referral_code, status, is_account_active, is_admin, activated_at)
        VALUES (
            admin_uuid,
            'Admin User',
            'ADMIN-CODE', -- Admin's unique referral code
            'active',
            true,
            true,
            now()
        );
        RAISE NOTICE 'Admin profile created in public.users.';
    ELSE
        -- If profile exists, ensure is_admin is true
        UPDATE public.users SET is_admin = true WHERE id = admin_uuid;
        RAISE NOTICE 'Admin profile already exists in public.users. Ensured is_admin is true.';
    END IF;

    -- Check if a wallet for the admin exists. If not, create one.
    IF NOT EXISTS (SELECT 1 FROM public.user_wallets WHERE user_id = admin_uuid) THEN
        INSERT INTO public.user_wallets (user_id) VALUES (admin_uuid);
        RAISE NOTICE 'Admin wallet created in user_wallets.';
    ELSE
        RAISE NOTICE 'Admin wallet already exists in user_wallets.';
    END IF;

END;
$$ LANGUAGE plpgsql;

-- Execute the function to create the admin user
-- !! IMPORTANT !! Replace 'admin123' with a secure password before running this script.
SELECT public.setup_admin_user('admin@stakinghub.com', 'admin123');

-- Final confirmation notice
DO $$
BEGIN
    RAISE NOTICE 'Database schema setup and seeding complete.';
END $$;
